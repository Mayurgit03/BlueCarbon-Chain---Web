import React, { useState, useEffect } from 'react';

// Extend Window interface for MetaMask
declare global {
  interface Window {
    ethereum?: any;
  }
}
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import DashboardHeader from './DashboardHeader';
import { 
  ShoppingCart, 
  Search, 
  CreditCard, 
  BarChart3, 
  FileText,
  MapPin,
  Eye,
  Download,
  Award,
  Leaf,
  Building
} from 'lucide-react';

const CarbonMarketplaceDashboard: React.FC = () => {
  const [selectedCredit, setSelectedCredit] = useState<string | null>(null);
  const [availableCredits, setAvailableCredits] = useState([]);
  const [showTraceability, setShowTraceability] = useState(false);
  const [showCertificate, setShowCertificate] = useState(false);
  const [certificateData, setCertificateData] = useState({
    companyName: 'Your Company',
    credits: '800',
    co2Offset: '800 tons'
  });
  const [tokenizedRecords, setTokenizedRecords] = useState([]);

  const handleHomeClick = () => {
    window.location.href = '/';
  };

  const handleBuyCredits = async (credit: any) => {
    try {
      // Check if MetaMask is installed
      if (typeof window.ethereum === 'undefined') {
        alert('Please install MetaMask to purchase credits');
        return;
      }

      // Request account access - this will show MetaMask popup
      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
      
      if (!accounts || accounts.length === 0) {
        alert('Please connect your MetaMask wallet to continue');
        return;
      }
      
      const userAccount = accounts[0];
      
      // Open MetaMask with fake transaction on localhost
      const fakeTransactionParams = {
        from: userAccount,
        to: '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
        value: '0x0', // 0 ETH for fake transaction
        gas: '0x5208',
        gasPrice: '0x0', // 0 gas price for fake transaction
        data: '0x'
      };

      let transactionHash;
      try {
        // This opens MetaMask popup with fake transaction
        transactionHash = await window.ethereum.request({
          method: 'eth_sendTransaction',
          params: [fakeTransactionParams]
        });
      } catch (error) {
        // Generate fake hash if user cancels or error occurs
        transactionHash = `0x${Math.random().toString(16).substr(2, 64)}`;
      }
      
      // Smart contract certificate generation simulation
      alert('Transaction processed! Smart contract generating certificate on Quorum blockchain...');
      
      // Simulate blockchain processing delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Generate certificate record from smart contract
      const certificateRecord = {
        id: `CERT_${Date.now()}`,
        walletAddress: userAccount,
        credits: credit.available,
        project: credit.project,
        transactionHash,
        blockchainNetwork: 'Quorum',
        smartContract: '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
        timestamp: new Date().toISOString(),
        certificateImage: '/images/certificate.jpg'
      };
      
      // Store in localStorage (simulating blockchain storage)
      const existingRecords = JSON.parse(localStorage.getItem('tokenizedRecords') || '[]');
      localStorage.setItem('tokenizedRecords', JSON.stringify([certificateRecord, ...existingRecords]));
      
      // Reload tokenized records
      setTokenizedRecords([certificateRecord, ...existingRecords]);
      
      // Show success message
      alert(`Certificate generated by smart contract!\nTransaction: ${transactionHash}\nStored on Quorum blockchain`);
      
      // Auto-download certificate
      setTimeout(() => {
        downloadCertificate('jpg');
      }, 1000);
      
    } catch (error) {
      console.error('Transaction failed:', error);
      alert('Transaction cancelled or failed. Please try again.');
    }
  };

  const downloadCertificate = (format: string) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    img.onload = () => {
      canvas.width = img.width;
      canvas.height = img.height;
      ctx?.drawImage(img, 0, 0);
      
      // Add custom text
      if (ctx) {
        ctx.font = 'bold 48px Arial';
        ctx.fillStyle = '#000';
        ctx.textAlign = 'center';
        ctx.fillText(certificateData.companyName, canvas.width / 2, 400);
        ctx.fillText(`${certificateData.credits} Credits`, canvas.width / 2, 500);
        ctx.fillText(`${certificateData.co2Offset} COâ‚‚ Offset`, canvas.width / 2, 600);
      }
      
      const link = document.createElement('a');
      link.download = `carbon-certificate.${format}`;
      link.href = canvas.toDataURL(`image/${format === 'jpg' ? 'jpeg' : format}`);
      link.click();
    };
    
    img.src = '/images/certificate.jpg';
  };

  // Load published credits from localStorage
  useEffect(() => {
    const loadCredits = () => {
      const publishedCredits = JSON.parse(localStorage.getItem('publishedCredits') || '[]');
      const defaultCredits = [
        {
          id: 'CC001',
          project: 'Kerala Coastal Restoration',
          ngo: 'Coastal Conservation NGO',
          location: 'Kochi, Kerala',
          type: 'Mangrove Restoration',
          price: 250,
          available: 1200,
          vintage: '2024',
          verification: 'Gold Standard',
          photos: 15
        },
        {
          id: 'CC002',
          project: 'Tamil Nadu Mangrove Project',
          ngo: 'Green Earth Foundation',
          location: 'Chennai, Tamil Nadu',
          type: 'Blue Carbon',
          price: 280,
          available: 800,
          vintage: '2024',
          verification: 'VCS',
          photos: 12
        },
        {
          id: 'CC003',
          project: 'Sundarbans Conservation',
          ngo: 'Wildlife Protection Society',
          location: 'West Bengal',
          type: 'Wetland Restoration',
          price: 300,
          available: 600,
          vintage: '2023',
          verification: 'CDM',
          photos: 20
        }
      ];
      setAvailableCredits([...defaultCredits, ...publishedCredits]);
    };

    loadCredits();
    
    // Listen for storage changes
    const handleStorageChange = () => loadCredits();
    window.addEventListener('storage', handleStorageChange);
    
    // Poll for updates every 2 seconds
    const interval = setInterval(loadCredits, 2000);
    
    return () => {
      window.removeEventListener('storage', handleStorageChange);
      clearInterval(interval);
    };
  }, []);

  // Load tokenized records
  useEffect(() => {
    const records = JSON.parse(localStorage.getItem('tokenizedRecords') || '[]');
    setTokenizedRecords(records);
  }, []);



  const purchaseHistory = [
    {
      id: 'PH001',
      project: 'Kerala Coastal Restoration',
      credits: 500,
      price: 250,
      total: 125000,
      date: '2024-01-10',
      status: 'retired',
      certificate: 'CERT001'
    },
    {
      id: 'PH002',
      project: 'Tamil Nadu Mangrove Project',
      credits: 300,
      price: 280,
      total: 84000,
      date: '2024-01-05',
      status: 'active',
      certificate: null
    }
  ];

  const impactAnalytics = {
    totalCredits: 800,
    retiredCredits: 500,
    co2Offset: '800 tons',
    treesSupported: 12500,
    communitiesImpacted: 8,
    esgScore: 85
  };

  return (
    <div className="min-h-screen bg-background">
      <DashboardHeader 
        userRole="buyer" 
        userName="Carbon Credit Buyer" 
        onHomeClick={handleHomeClick}
      />
      <div className="p-6">
        <div className="max-w-7xl mx-auto">
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-foreground mb-2">Carbon Marketplace</h1>
          </div>

        <Tabs defaultValue="browse" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="browse">Browse Credits</TabsTrigger>
            <TabsTrigger value="analytics">Impact Analytics</TabsTrigger>
            <TabsTrigger value="reports">ESG Reports</TabsTrigger>
          </TabsList>

          {/* Browse Credits */}
          <TabsContent value="browse" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <ShoppingCart className="h-5 w-5" />
                  Available Carbon Credits
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div>
                    <label className="text-sm font-medium">Location</label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="All locations" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="kerala">Kerala</SelectItem>
                        <SelectItem value="tamil-nadu">Tamil Nadu</SelectItem>
                        <SelectItem value="west-bengal">West Bengal</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <label className="text-sm font-medium">NGO</label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="All NGOs" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="coastal">Coastal Conservation NGO</SelectItem>
                        <SelectItem value="green-earth">Green Earth Foundation</SelectItem>
                        <SelectItem value="wildlife">Wildlife Protection Society</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <label className="text-sm font-medium">Project Type</label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="All types" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="mangrove">Mangrove Restoration</SelectItem>
                        <SelectItem value="blue-carbon">Blue Carbon</SelectItem>
                        <SelectItem value="wetland">Wetland Restoration</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <label className="text-sm font-medium">Price Range</label>
                    <Input placeholder="Max price â‚¹" />
                  </div>
                </div>

                <div className="space-y-4">
                  {availableCredits.map((credit) => (
                    <div key={credit.id} className="border rounded-lg p-4">
                      <div className="flex justify-between items-start mb-3">
                        <div>
                          <h3 className="font-semibold">{credit.project}</h3>
                          <p className="text-sm text-muted-foreground">{credit.ngo} â€¢ {credit.location}</p>
                          <div className="flex gap-2 mt-2">
                            <Badge variant="outline">{credit.type}</Badge>
                            <Badge variant="outline">{credit.verification}</Badge>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="text-2xl font-bold">â‚¹{credit.price}</div>
                          <p className="text-sm text-muted-foreground">per ton COâ‚‚</p>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-3 gap-4 text-sm mb-3">
                        <div>
                          <p className="text-muted-foreground">Available</p>
                          <p className="font-semibold">{credit.available} credits</p>
                        </div>
                        <div>
                          <p className="text-muted-foreground">Vintage</p>
                          <p className="font-semibold">{credit.vintage}</p>
                        </div>
                        <div>
                          <p className="text-muted-foreground">Photos</p>
                          <p className="font-semibold">{credit.photos} images</p>
                        </div>
                      </div>

                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => {
                            setSelectedCredit(credit.id);
                            setShowTraceability(true);
                          }}
                        >
                          <Eye className="h-4 w-4 mr-1" />
                          View Details
                        </Button>
                        <Button 
                          size="sm"
                          onClick={() => handleBuyCredits(credit)}
                        >
                          <ShoppingCart className="h-4 w-4 mr-1" />
                          Buy Credits
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>





          {/* Impact Analytics */}
          <TabsContent value="analytics" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card>
                <CardContent className="p-4">
                  <div className="text-2xl font-bold">{impactAnalytics.totalCredits}</div>
                  <p className="text-sm text-muted-foreground">Total Credits Purchased</p>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-4">
                  <div className="text-2xl font-bold">{impactAnalytics.co2Offset}</div>
                  <p className="text-sm text-muted-foreground">COâ‚‚ Offset</p>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-4">
                  <div className="text-2xl font-bold">{impactAnalytics.esgScore}</div>
                  <p className="text-sm text-muted-foreground">ESG Score</p>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5" />
                  Sustainability Impact Dashboard
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <h4 className="font-semibold">Environmental Impact</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span>Trees Supported:</span>
                        <span className="font-semibold">{impactAnalytics.treesSupported.toLocaleString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Communities Impacted:</span>
                        <span className="font-semibold">{impactAnalytics.communitiesImpacted}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Mangrove Area Restored:</span>
                        <span className="font-semibold">450 hectares</span>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <h4 className="font-semibold">Social Impact</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span>Livelihoods Supported:</span>
                        <span className="font-semibold">156 families</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Revenue to Communities:</span>
                        <span className="font-semibold">â‚¹4,80,000</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Training Programs:</span>
                        <span className="font-semibold">12 sessions</span>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* ESG Reports */}
          <TabsContent value="reports" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Generate ESG Reports
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Button variant="outline" className="justify-start">
                    <Building className="h-4 w-4 mr-2" />
                    Corporate Sustainability Report
                  </Button>
                  <Button variant="outline" className="justify-start">
                    <Award className="h-4 w-4 mr-2" />
                    Carbon Neutrality Certificate
                  </Button>
                  <Button variant="outline" className="justify-start">
                    <BarChart3 className="h-4 w-4 mr-2" />
                    Impact Analytics Report
                  </Button>
                  <Button variant="outline" className="justify-start">
                    <FileText className="h-4 w-4 mr-2" />
                    Stakeholder Impact Summary
                  </Button>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Tokenized Records</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {tokenizedRecords.length === 0 ? (
                    <div className="border-2 border-dashed border-primary/20 rounded-lg p-6 text-center bg-gradient-to-br from-primary/5 to-accent/5">
                      <Award className="h-12 w-12 mx-auto text-primary mb-4" />
                      <h3 className="text-xl font-bold mb-2">No Tokenized Records Yet</h3>
                      <p className="text-muted-foreground mb-4">
                        Purchase carbon credits to generate tokenized certificates
                      </p>
                    </div>
                  ) : (
                    tokenizedRecords.map((record, idx) => (
                      <div key={idx} className="border rounded-lg p-4 space-y-3">
                        <div className="flex justify-between items-start">
                          <div>
                            <h4 className="font-semibold">{record.project}</h4>
                            <p className="text-sm text-muted-foreground">Wallet: {record.walletAddress}</p>
                            <p className="text-sm text-muted-foreground">TX: {record.transactionHash}</p>
                            <p className="text-sm text-muted-foreground">Network: {record.blockchainNetwork || 'Quorum'}</p>
                          </div>
                          <Badge variant="default">Tokenized</Badge>
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <img 
                              src={record.certificateImage} 
                              alt="Certificate" 
                              className="w-full h-32 object-cover rounded"
                            />
                          </div>
                          <div className="space-y-2">
                            <div className="text-sm">
                              <span className="font-medium">Credits: </span>
                              <span>{record.credits}</span>
                            </div>
                            <div className="text-sm">
                              <span className="font-medium">Date: </span>
                              <span>{new Date(record.timestamp).toLocaleDateString()}</span>
                            </div>
                            <Button 
                              size="sm" 
                              variant="outline"
                              onClick={() => {
                                const link = document.createElement('a');
                                link.href = record.certificateImage;
                                link.download = `certificate-${record.id}.jpg`;
                                link.click();
                              }}
                            >
                              <Download className="h-3 w-3 mr-1" />
                              Download Certificate
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Traceability Modal */}
        <Dialog open={showTraceability} onOpenChange={setShowTraceability}>
          <DialogContent className="max-w-4xl">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <Search className="h-5 w-5" />
                Credit Traceability & Project Origin
              </DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <h4 className="font-semibold">Project Details</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>Project ID:</span>
                      <span className="font-mono">{selectedCredit}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Location:</span>
                      <span>Kochi, Kerala</span>
                    </div>
                    <div className="flex justify-between">
                      <span>NGO Partner:</span>
                      <span>Coastal Conservation NGO</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Verification Date:</span>
                      <span>2024-01-15</span>
                    </div>
                    <div className="flex justify-between">
                      <span>NCCR Approval:</span>
                      <span className="text-green-600">Verified</span>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <h4 className="font-semibold">Photo Evidence</h4>
                  <div className="grid grid-cols-3 gap-2">
                    {[
                      'https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=200&h=200&fit=crop',
                      'https://images.unsplash.com/photo-1574263867128-a3d5c1b1deaa?w=200&h=200&fit=crop',
                      'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=200&h=200&fit=crop',
                      'https://images.unsplash.com/photo-1518837695005-2083093ee35b?w=200&h=200&fit=crop',
                      'https://images.unsplash.com/photo-1569163139394-de4e4f43e4e3?w=200&h=200&fit=crop',
                      'https://images.unsplash.com/photo-1542273917363-3b1817f69a2d?w=200&h=200&fit=crop'
                    ].map((src, i) => (
                      <div key={i} className="aspect-square bg-muted rounded-lg overflow-hidden">
                        <img src={src} alt={`Project photo ${i + 1}`} className="w-full h-full object-cover" />
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <div className="border-t pt-4">
                <h4 className="font-semibold mb-3">Blockchain Verification Trail</h4>
                <div className="space-y-2 text-sm font-mono">
                  <div className="p-2 bg-muted rounded">
                    <span className="text-green-600">âœ“</span> Community Upload: 0x1a2b3c4d...
                  </div>
                  <div className="p-2 bg-muted rounded">
                    <span className="text-green-600">âœ“</span> NGO Verification: 0x2b3c4d5e...
                  </div>
                  <div className="p-2 bg-muted rounded">
                    <span className="text-green-600">âœ“</span> NCCR Approval: 0x3c4d5e6f...
                  </div>
                  <div className="p-2 bg-muted rounded">
                    <span className="text-blue-600">â—‰</span> Credit Issuance: 0x4d5e6f7g...
                  </div>
                </div>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Certificate Customization Modal */}
        <Dialog open={showCertificate} onOpenChange={setShowCertificate}>
          <DialogContent className="max-w-4xl">
            <DialogHeader>
              <DialogTitle>Customize Your Carbon Certificate</DialogTitle>
            </DialogHeader>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="space-y-4">
                <h4 className="font-semibold">Certificate Details</h4>
                <div className="space-y-3">
                  <div>
                    <label className="text-sm font-medium">Company Name</label>
                    <Input
                      value={certificateData.companyName}
                      onChange={(e) => setCertificateData({...certificateData, companyName: e.target.value})}
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium">Credits Purchased</label>
                    <Input
                      value={certificateData.credits}
                      onChange={(e) => setCertificateData({...certificateData, credits: e.target.value})}
                    />
                  </div>
                  <div>
                    <label className="text-sm font-medium">COâ‚‚ Offset</label>
                    <Input
                      value={certificateData.co2Offset}
                      onChange={(e) => setCertificateData({...certificateData, co2Offset: e.target.value})}
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <h4 className="font-semibold">Download Options</h4>
                  <div className="flex gap-2">
                    <Button onClick={() => downloadCertificate('jpg')} variant="outline">JPG</Button>
                    <Button onClick={() => downloadCertificate('png')} variant="outline">PNG</Button>
                    <Button onClick={() => downloadCertificate('pdf')} variant="outline">PDF</Button>
                  </div>
                </div>
              </div>
              <div className="space-y-4">
                <h4 className="font-semibold">Certificate Preview</h4>
                <div className="border rounded-lg p-4 bg-gray-50">
                  <img 
                    src="/images/certificate.jpg" 
                    alt="Certificate Preview" 
                    className="w-full h-auto rounded"
                  />
                  <div className="mt-4 text-center space-y-2">
                    <p className="font-bold text-lg">{certificateData.companyName}</p>
                    <p>{certificateData.credits} Credits</p>
                    <p>{certificateData.co2Offset} COâ‚‚ Offset</p>
                  </div>
                </div>
              </div>
            </div>
          </DialogContent>
        </Dialog>
        </div>
      </div>
    </div>
  );
};

export default CarbonMarketplaceDashboard;